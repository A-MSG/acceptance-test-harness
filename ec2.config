import org.jenkinsci.test.acceptance.controller.*
import org.jenkinsci.test.acceptance.guice.TestScope
import org.jenkinsci.test.acceptance.resolver.JenkinsDownloader
import org.jenkinsci.test.acceptance.resolver.JenkinsResolver
import org.jenkinsci.test.acceptance.resolver.JenkinsUploader
import org.jenkinsci.test.acceptance.slave.SlaveController
import org.jenkinsci.test.acceptance.slave.SlaveProvider
import org.jenkinsci.test.acceptance.slave.SshSlaveProvider


user="ubuntu"
privateKeyFile = new File("/Users/vivek/ws/jenkins/acceptance-test-harness/.jenkins_test/.ssh/id_rsa")
publicKeyFile = new File("/Users/vivek/ws/jenkins/acceptance-test-harness/.jenkins_test/.ssh/id_rsa.pub")
bind(Authenticator).named("publicKeyAuthenticator").to(PublicKeyAuthenticator)

//node_id="i-9105c3b2"

bind MachineProvider toProvider MultitenancyMachineProvider

def localWar = new File("/Users/vivek/Downloads/jenkins.war")
//bind JenkinsResolver toInstance new JenkinsUploader(localWar)
jenkins_md5_sum="b6aacb5f25a323120f8c791fe2d947b9"
bind JenkinsResolver toInstance new JenkinsDownloader("http://mirrors.jenkins-ci.org/war/latest/jenkins.war")

bind(JenkinsController).toProvider(JenkinsProvider).in(TestScope)


bind JenkinsController named "joc" toInstance new WinstoneController(localWar)

subworld("slaves") {
    user="ubuntu1"
    max_mt_machines=2

    bind MachineProvider to Ec2Provider
    export MultitenancyMachineProvider
    bind SlaveProvider to SshSlaveProvider

    export SlaveProvider
}

subworld("masters") {
    user="ubuntu2"
    max_mt_machines=2

    bind MachineProvider to Ec2Provider
    export MultitenancyMachineProvider
}
